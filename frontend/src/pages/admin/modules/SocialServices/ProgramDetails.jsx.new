import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import useResidents from '../../../../hooks/useResidents';
import axiosInstance from '../../../../utils/axiosConfig';

// Use relative URLs to leverage Vite proxy
const fetchPrograms = async () => {
  const res = await fetch('/api/programs', {
    credentials: 'include',
  });
  return await res.json();
};

const fetchBeneficiaries = async (programId) => {
  const res = await fetch('/api/beneficiaries', {
    credentials: 'include',
  });
  const all = await res.json();
  return all.filter((b) => String(b.program_id) === String(programId));
};

const ProgramDetails = () => {
  // State declarations
  const [showPredictive, setShowPredictive] = useState(true);
  const { id } = useParams();
  const navigate = useNavigate();
  const [program, setProgram] = useState(null);
  const [beneficiaries, setBeneficiaries] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [toast, setToast] = useState(null);
  const [formError, setFormError] = useState('');
  const [formSuccess, setFormSuccess] = useState('');
  const [formLoading, setFormLoading] = useState(false);
  const { residents, loading: residentsLoading, error: residentsError } = useResidents();

  const [form, setForm] = useState({
    name: '',
    beneficiaryType: '',
    assistanceType: '',
    status: '',
    amount: '',
    contactNumber: '',
    email: '',
    fullAddress: '',
    remarks: '',
  });

  // Profile refresh function
  const refreshProfile = async () => {
    try {
      // First ensure CSRF is set
      await fetch('/sanctum/csrf-cookie', { credentials: 'include' });

      // Use the same profile fetch logic as the sidebar
      let profileResp;
      try {
        profileResp = await axiosInstance.get('/profile');
      } catch (firstErr) {
        console.warn('First profile endpoint failed, trying fallback:', firstErr);
        profileResp = await axiosInstance.get('/user/profile');
      }

      // Trigger profile update with the data
      window.dispatchEvent(new CustomEvent('profile-updated', { 
        detail: {
          profile: profileResp.data,
          timestamp: new Date().toISOString()
        }
      }));

      return true;
    } catch (err) {
      console.warn('Profile refresh failed:', err);
      return false;
    }
  };

  // Toggle handler with toast feedback
  const toggleMyBenefits = async (beneficiary) => {
    // Find the resident by matching beneficiary name parts with resident name
    const residentMatch = residents?.find(r => {
      const norm = s => (s || '').toLowerCase().trim();
      const [bFirst, bLast] = beneficiary.name.split(' ').filter(Boolean);
      return norm(r.first_name) === norm(bFirst) && norm(r.last_name) === norm(bLast);
    });

    // Get the profile_id since that's what the backend expects
    const profileId = residentMatch?.profile_id;
    if (!profileId) {
      setToast({
        type: 'error',
        message: 'Could not find resident profile to toggle benefits'
      });
      return;
    }
    
    console.log('Found resident match:', residentMatch, 'using profile_id:', profileId, 'for beneficiary:', beneficiary);

    const original = beneficiaries.slice();
    const newEnabled = !beneficiary.my_benefits_enabled;

    try {
      console.log('Attempting to toggle My Benefits', {
        resident: residentMatch.id,
        enabled: newEnabled,
        beneficiary: beneficiary.id,
        program: beneficiary.program_id
      });
      
      const resp = await axiosInstance.post(`/admin/residents/${encodeURIComponent(String(residentMatch.id))}/toggle-my-benefits`, {
        enabled: newEnabled,
        beneficiary_id: beneficiary.id,
        program_id: beneficiary.program_id,
        profile_id: profileId
      });

      if (!resp?.data?.enabled === newEnabled) {
        throw new Error('Server returned unexpected enabled state');
      }

      setBeneficiaries(prevBeneficiaries => 
        prevBeneficiaries.map(b => 
          b.id === beneficiary.id 
            ? { ...b, my_benefits_enabled: resp.data.enabled }
            : b
        )
      );

      await new Promise(resolve => setTimeout(resolve, 500));
      await refreshProfile();

      setToast({ 
        type: 'success', 
        message: resp.data.message || 'Permission updated successfully'
      });
    } catch (err) {
      console.error('Toggle My Benefits failed:', err);
      setBeneficiaries(original);
      setToast({ 
        type: 'error', 
        message: err.response?.data?.message || err.message || 'Failed to update permission'
      });
    } finally {
      setTimeout(() => setToast(null), 3000);
    }
  };

  // Effects
  useEffect(() => {
    fetch('/sanctum/csrf-cookie', { credentials: 'include' })
      .then(() => {
        fetchPrograms().then((programs) => {
          const found = programs.find((p) => String(p.id) === String(id));
          setProgram(found);
        });
        fetchBeneficiaries(id).then(setBeneficiaries);
      });
  }, [id]);

  useEffect(() => {
    if (showModal && program) {
      setForm(f => ({
        ...f,
        beneficiaryType: f.beneficiaryType || program.beneficiary_type || program.beneficiaryType || '',
        assistanceType: f.assistanceType || program.assistance_type || program.assistanceType || '',
        amount: f.amount || program.amount || '',
      }));
    }
  }, [showModal, program]);

  useEffect(() => {
    if (!showModal) {
      setForm({
        name: '',
        beneficiaryType: '',
        assistanceType: '',
        status: '',
        amount: '',
        contactNumber: '',
        email: '',
        fullAddress: '',
        remarks: '',
        selectedResidentId: '',
      });
    }
  }, [showModal]);

  if (!program) {
    return (
      <div className="p-8 text-center">
        <div className="text-red-600 text-xl font-bold mb-4">Program not found</div>
        <div className="text-gray-600 mb-4">
          The program with ID <span className="font-mono">{id}</span> does not exist or was deleted.
        </div>
        <button
          onClick={() => navigate(-1)}
          className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-xl shadow-lg text-sm font-semibold transition-all duration-300"
        >
          &larr; Back to Programs
        </button>
      </div>
    );
  }

  // Program analytics data
  const totalBeneficiaries = beneficiaries.length;
  const maxBeneficiary = program?.max_beneficiaries ?? program?.maxBeneficiaries ?? 'N/A';
  const programStatus = program?.status ?? 'N/A';
  const statusCounts = beneficiaries.reduce((acc, b) => {
    const status = b.status || 'Unknown';
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, {});
  const statusLabels = Object.keys(statusCounts);

  // Predictive analysis
  let predictionText = '';
  let predictionColor = 'text-black';
  let chartData = null;
  const startDate = program?.start_date || program?.startDate || '';
  const endDate = program?.end_date || program?.endDate || '';
  
  function cropDate(dateStr) {
    if (!dateStr) return '';
    return dateStr.split('T')[0];
  }

  if (startDate && endDate && maxBeneficiary !== 'N/A' && !isNaN(Number(maxBeneficiary)) && Number(maxBeneficiary) > 0) {
    const start = new Date(startDate);
    const end = new Date(endDate);
    const today = new Date();
    const daysTotal = Math.max(1, Math.round((end - start) / (1000 * 60 * 60 * 24)));
    const daysElapsed = Math.max(0, Math.round((today - start) / (1000 * 60 * 60 * 24)));
    const beneficiariesPerDay = daysElapsed > 0 ? totalBeneficiaries / daysElapsed : 0;
    const daysLeft = Math.max(0, Math.round((end - today) / (1000 * 60 * 60 * 24)));
    const predictedTotal = beneficiariesPerDay * daysTotal;
    
    chartData = {
      totalBeneficiaries,
      maxBeneficiary: Number(maxBeneficiary),
      predictedTotal: Math.round(predictedTotal),
      daysLeft,
    };

    if (daysElapsed === 0) {
      predictionText = 'Not enough data yet to predict beneficiary growth.';
    } else if (predictedTotal >= Number(maxBeneficiary)) {
      predictionText = `At the current rate, this program is likely to reach its maximum beneficiaries (${maxBeneficiary}) before the end date (${cropDate(endDate)}).`;
    } else {
      predictionText = `At the current rate, this program may not reach its maximum beneficiaries (${maxBeneficiary}) by the end date (${cropDate(endDate)}). Consider increasing outreach or extending the program.`;
    }
  } else {
    predictionText = 'Insufficient data for prediction (missing dates or maximum beneficiaries).';
  }

  return (
    <main className="bg-gradient-to-br from-green-50 to-white min-h-screen pt-20 px-2 sm:px-4 md:px-8 pb-10 font-sans lg:ml-64">
      <div className="w-full max-w-5xl mx-auto space-y-8">
        <button onClick={() => navigate(-1)} className="text-green-700 hover:underline mb-4">
          &larr; Back to Programs
        </button>

        {/* Predictive Analysis Section */}
        <div className="bg-white rounded-2xl shadow-lg border border-emerald-300 p-8 mb-10">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <svg className="w-7 h-7 text-emerald-700" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 17v-2a4 4 0 014-4h2a4 4 0 014 4v2M9 17H7a4 4 0 01-4-4V7a4 4 0 014-4h10a4 4 0 014 4v6a4 4 0 01-4 4h-2M9 17v2a4 4 0 004 4h2a4 4 0 004-4v-2" />
              </svg>
              <span className="font-bold text-2xl text-emerald-700">Predictive Analysis</span>
            </div>
            <button
              className="px-4 py-2 bg-emerald-100 hover:bg-emerald-200 text-emerald-700 rounded-lg font-semibold text-sm shadow transition-all duration-200"
              onClick={() => setShowPredictive(v => !v)}
            >
              {showPredictive ? 'Hide' : 'Show'}
            </button>
          </div>
          {showPredictive && (
            <>
              <div className={predictionColor + " text-base mb-6 font-medium"}>{predictionText}</div>
              {chartData && (
                <div className="w-full max-w-lg mx-auto">
                  <div className="bg-white border border-gray-200 rounded-2xl p-6 shadow flex flex-col gap-4">
                    <div className="grid grid-cols-2 gap-4 mb-2">
                      <div className="flex flex-col items-center">
                        <span className="text-gray-500 text-xs">Current Beneficiaries</span>
                        <span className="text-green-700 font-bold text-2xl">{chartData.totalBeneficiaries}</span>
                      </div>
                      <div className="flex flex-col items-center">
                        <span className="text-gray-500 text-xs">Maximum Allowed</span>
                        <span className="text-blue-700 font-bold text-2xl">{chartData.maxBeneficiary}</span>
                      </div>
                      <div className="flex flex-col items-center">
                        <span className="text-gray-500 text-xs">Predicted Total</span>
                        <span className="text-indigo-700 font-bold text-2xl">{chartData.predictedTotal}</span>
                      </div>
                      <div className="flex flex-col items-center">
                        <span className="text-gray-500 text-xs">Days Left</span>
                        <span className="text-emerald-700 font-bold text-2xl">{chartData.daysLeft}</span>
                      </div>
                    </div>
                    <div className="w-full h-6 bg-gray-100 rounded-lg mt-2 relative flex items-center">
                      <div className="absolute left-0 top-0 h-6 bg-green-500 rounded-l-lg" 
                        style={{ width: `${Math.min(100, (chartData.totalBeneficiaries / chartData.maxBeneficiary) * 100)}%`, zIndex: 2 }}>
                      </div>
                      <div className="absolute left-0 top-0 h-6 bg-indigo-400 rounded-l-lg opacity-70" 
                        style={{ width: `${Math.min(100, (chartData.predictedTotal / chartData.maxBeneficiary) * 100)}%`, zIndex: 1 }}>
                      </div>
                      <div className="absolute left-0 top-0 h-6 border-l-4 border-blue-700 h-full" 
                        style={{ left: `calc(100% - 2px)`, zIndex: 3 }}>
                      </div>
                      <div className="absolute w-full flex justify-between px-2 text-xs top-1">
                        <span className="text-green-700 font-semibold">Current</span>
                        <span className="text-indigo-700 font-semibold">Predicted</span>
                        <span className="text-blue-700 font-semibold">Max</span>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </div>

        {/* Program Analytics Section */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-2xl shadow-md border border-green-100 p-6 flex flex-col items-center justify-center">
            <div className="text-3xl font-bold text-green-700">{totalBeneficiaries}</div>
            <div className="text-gray-600 text-sm mt-1">Total Beneficiaries</div>
          </div>
          <div className="bg-white rounded-2xl shadow-md border border-blue-100 p-6 flex flex-col items-center justify-center">
            <div className="text-3xl font-bold text-blue-700">{maxBeneficiary}</div>
            <div className="text-gray-600 text-sm mt-1">Maximum Beneficiaries Allowed</div>
          </div>
          <div className="bg-white rounded-2xl shadow-md border border-indigo-100 p-6 flex flex-col items-center justify-center">
            <div className="text-lg font-semibold text-indigo-700">{programStatus}</div>
            <div className="text-gray-600 text-sm mt-1">Program Status</div>
          </div>
        </div>

        {/* Program Details Card */}
        <div className="rounded-2xl shadow-xl border-2 border-green-500 bg-white p-8">
          <h2 className="text-3xl font-bold text-green-700 mb-2">{program.name}</h2>
          <p className="text-gray-600 mb-2">{program.description}</p>
          <div className="text-xs text-gray-500 mb-4">
            {cropDate(program.start_date || program.startDate)} - {cropDate(program.end_date || program.endDate)}
          </div>
          <button
            className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-6 py-2 rounded-xl shadow-lg text-sm font-semibold transition-all duration-300 mt-2"
            onClick={() => setShowModal(true)}
          >
            + Add Beneficiary
          </button>
        </div>

        {/* Beneficiaries Table */}
        <div>
          <div className="bg-gradient-to-r from-green-600 to-emerald-600 px-6 py-4">
            <h3 className="text-white font-semibold text-lg">Beneficiaries</h3>
          </div>
          <table className="w-full text-sm">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="px-4 py-3 text-left font-semibold text-gray-700">Name</th>
                <th className="px-4 py-3 text-left font-semibold text-gray-700">Type</th>
                <th className="px-4 py-3 text-left font-semibold text-gray-700">Assistance</th>
                <th className="px-4 py-3 text-left font-semibold text-gray-700">Status</th>
                <th className="px-4 py-3 text-left font-semibold text-gray-700">Amount</th>
                <th className="px-4 py-3 text-right font-semibold text-gray-700">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-100">
              {beneficiaries.length === 0 ? (
                <tr>
                  <td colSpan="6" className="px-6 py-8 text-center text-gray-400">
                    No beneficiaries for this program.
                  </td>
                </tr>
              ) : (
                beneficiaries.map((beneficiary) => (
                  <tr key={beneficiary.id} className="hover:bg-green-50 transition-all duration-200">
                    <td className="px-4 py-3 font-semibold text-gray-900">{beneficiary.name}</td>
                    <td className="px-4 py-3">{beneficiary.beneficiary_type || beneficiary.beneficiaryType}</td>
                    <td className="px-4 py-3">{beneficiary.assistance_type || beneficiary.assistanceType}</td>
                    <td className="px-4 py-3">{beneficiary.status}</td>
                    <td className="px-4 py-3 text-green-700 font-semibold">
                      ₱ {beneficiary.amount?.toLocaleString()}
                    </td>
                    <td className="px-4 py-3 text-right">
                      <button
                        className={`px-3 py-1 rounded-full text-sm font-semibold transition ${beneficiary.my_benefits_enabled ? 'bg-green-600 text-white' : 'bg-gray-100 text-gray-700'}`}
                        onClick={() => toggleMyBenefits(beneficiary)}
                        title={beneficiary.my_benefits_enabled ? 'Disable My Benefits for this resident' : 'Enable My Benefits for this resident'}
                      >
                        {beneficiary.my_benefits_enabled ? 'Enabled' : 'Enable'}
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Toast */}
      {toast && (
        <div className={`fixed right-6 bottom-6 z-50 p-4 rounded-lg shadow-lg ${toast.type === 'success' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'}`}>
          <div className="font-semibold">{toast.type === 'success' ? 'Success' : 'Error'}</div>
          <div className="text-sm">{toast.message}</div>
        </div>
      )}
    </main>
  );
};

export default ProgramDetails;